//! ブロックチェーンデータ構造定義
//!
//! このモジュールはブロックチェーンアプリケーション全体で使用される
//! コアデータ構造を定義します。ブロック、トランザクション、
//! ネットワークピアの構造体を含み、ブロックチェーンのデータモデルの
//! 基盤を形成します。

const std = @import("std");

//------------------------------------------------------------------------------
// コアブロックチェーンデータ構造
//------------------------------------------------------------------------------

/// エンティティ間の価値移転を表すトランザクション構造体
///
/// ブロックチェーン内の単一のトランザクションを表し、
/// あるエンティティから別のエンティティへの価値の移転を記録します。
///
/// フィールド:
///     sender: トランザクション送信者の識別子
///     receiver: トランザクション受信者の識別子
///     amount: 移転される価値の量
pub const Transaction = struct {
    /// トランザクション送信者の識別子
    sender: []const u8,

    /// トランザクション受信者の識別子
    receiver: []const u8,

    /// 移転される価値の量
    amount: u64,
};

/// ブロックチェーン内の単一ブロックを表すブロック構造体
///
/// ブロックは複数のトランザクションを含み、チェーンの一部を形成します。
/// 各ブロックは前のブロックへの暗号的リンクを含み、
/// チェーン構造を作成します。
///
/// フィールド:
///     index: ブロックチェーン内の連続位置
///     timestamp: 作成時刻（Unixタイムスタンプ）
///     prev_hash: 前のブロックのハッシュ（チェーンを作成）
///     transactions: このブロックに含まれるトランザクションのリスト
///     nonce: プルーフオブワークマイニングに使用される値
///     data: ブロックに格納される追加データ
///     hash: このブロックの内容の暗号ハッシュ
pub const Block = struct {
    /// ブロックチェーン内の連続位置（ジェネシスブロックは0から開始）
    index: u32,

    /// Unixタイムスタンプ（エポックからの経過秒数）としての作成時刻
    timestamp: u64,

    /// 前のブロックのハッシュ、チェーン構造を作成
    /// ジェネシスブロックの場合はゼロで埋められる
    prev_hash: [32]u8,

    /// このブロックに含まれるトランザクションのリスト
    transactions: std.ArrayList(Transaction),

    /// プルーフオブワーク要件を満たすためにマイニング中に変更される値
    nonce: u64,

    /// ブロックに格納される追加データ（任意の情報）
    data: []const u8,

    /// このブロックの内容の暗号ハッシュ（SHA-256）
    /// 他のすべてのフィールドに基づいて計算され、難易度要件を満たす必要がある
    hash: [32]u8,
};

//------------------------------------------------------------------------------
// ネットワーク関連構造体
//------------------------------------------------------------------------------

/// 別のノードへの接続を表すネットワークピア構造体
///
/// ピアツーピアネットワーク内の接続されたピアを表します。
/// 各ピアは通信用のアドレスとネットワークストリームを持ちます。
///
/// フィールド:
///     address: ピアのネットワークアドレス
///     stream: データの送受信用のアクティブな接続ストリーム
pub const Peer = struct {
    /// ピアのネットワークアドレス
    address: std.net.Address,

    /// ピアとの通信用のアクティブな接続ストリーム
    stream: std.net.Stream,
};
